
[ec2-user@ip-172-31-94-134 tf-neo4j]$ terraform plan -var-file ws-neo4j-cores.tfvars -out n3.out
data.template_cloudinit_config.userdata[0]: Reading...
data.template_cloudinit_config.userdata[2]: Reading...
data.template_cloudinit_config.userdata[1]: Reading...
data.template_cloudinit_config.userdata[2]: Read complete after 0s [id=3687350282]
data.template_cloudinit_config.userdata[0]: Read complete after 0s [id=3687350282]
data.template_cloudinit_config.userdata[1]: Read complete after 0s [id=3687350282]
data.aws_route53_zone.domain[0]: Reading...
data.aws_iam_policy_document.instances: Reading...
data.aws_iam_policy_document.cwlogs: Reading...
data.aws_iam_policy_document.cwlogs: Read complete after 0s [id=3442509011]
data.aws_iam_policy_document.instances: Read complete after 0s [id=1708296928]
data.aws_route53_zone.domain[0]: Read complete after 1s [id=Z01174155YR4AKQ2A15D]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create

Terraform will perform the following actions:

  # aws_ebs_volume.ebs_data_block[0] will be created
  + resource "aws_ebs_volume" "ebs_data_block" {
      + arn               = (known after apply)
      + availability_zone = (known after apply)
      + encrypted         = true
      + final_snapshot    = false
      + id                = (known after apply)
      + iops              = 0
      + kms_key_id        = (known after apply)
      + size              = 8
      + snapshot_id       = (known after apply)
      + tags              = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j-core-1"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + tags_all          = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j-core-1"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + throughput        = (known after apply)
      + type              = "gp2"
    }

  # aws_ebs_volume.ebs_data_block[1] will be created
  + resource "aws_ebs_volume" "ebs_data_block" {
      + arn               = (known after apply)
      + availability_zone = (known after apply)
      + encrypted         = true
      + final_snapshot    = false
      + id                = (known after apply)
      + iops              = 0
      + kms_key_id        = (known after apply)
      + size              = 8
      + snapshot_id       = (known after apply)
      + tags              = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j-core-2"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + tags_all          = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j-core-2"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + throughput        = (known after apply)
      + type              = "gp2"
    }

  # aws_ebs_volume.ebs_data_block[2] will be created
  + resource "aws_ebs_volume" "ebs_data_block" {
      + arn               = (known after apply)
      + availability_zone = (known after apply)
      + encrypted         = true
      + final_snapshot    = false
      + id                = (known after apply)
      + iops              = 0
      + kms_key_id        = (known after apply)
      + size              = 8
      + snapshot_id       = (known after apply)
      + tags              = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j-core-3"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + tags_all          = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j-core-3"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + throughput        = (known after apply)
      + type              = "gp2"
    }

  # aws_iam_policy.cwlogs[0] will be created
  + resource "aws_iam_policy" "cwlogs" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "CustomerManaged_tflab_develop_neo4j_cwlog-write"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:PutLogEvents",
                          + "logs:DescribeLogStreams",
                          + "logs:DescribeLogGroups",
                          + "logs:CreateLogStream",
                          + "logs:CreateLogGroup",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # aws_iam_policy.instances will be created
  + resource "aws_iam_policy" "instances" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "CustomerManaged_tflab_develop_neo4j_ec2-desc"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:DescribeVolumeStatus",
                          + "ec2:DescribeVolume*",
                          + "ec2:DescribeSnapshots",
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeInstanceStatus",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # aws_iam_role_policy_attachment.cwlogs_core[0] will be created
  + resource "aws_iam_role_policy_attachment" "cwlogs_core" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "CustomerManaged_tflab_develop_ec2-role"
    }

  # aws_iam_role_policy_attachment.instances_core will be created
  + resource "aws_iam_role_policy_attachment" "instances_core" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "CustomerManaged_tflab_develop_ec2-role"
    }

  # aws_route53_record.dns_record[0] will be created
  + resource "aws_route53_record" "dns_record" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = "tflab-neo4j-core-01.cmcloudlab436.info"
      + records         = (known after apply)
      + ttl             = 60
      + type            = "A"
      + zone_id         = "Z01174155YR4AKQ2A15D"
    }

  # aws_route53_record.dns_record[1] will be created
  + resource "aws_route53_record" "dns_record" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = "tflab-neo4j-core-02.cmcloudlab436.info"
      + records         = (known after apply)
      + ttl             = 60
      + type            = "A"
      + zone_id         = "Z01174155YR4AKQ2A15D"
    }

  # aws_route53_record.dns_record[2] will be created
  + resource "aws_route53_record" "dns_record" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = "tflab-neo4j-core-03.cmcloudlab436.info"
      + records         = (known after apply)
      + ttl             = 60
      + type            = "A"
      + zone_id         = "Z01174155YR4AKQ2A15D"
    }

  # aws_security_group.sg will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Security group for the tflab Neo4j cluster"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "tflab-develop-neo4j-sgPrimary"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + tags_all               = {
          + "Environment"    = "develop"
          + "Name"           = "tflab-develop-neo4j"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
        }
      + vpc_id                 = "vpc-00a2df302500bbec8"
    }

  # aws_security_group_rule.egress_discovery will be created
  + resource "aws_security_group_rule" "egress_discovery" {
      + from_port                = 5000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 5000
      + type                     = "egress"
    }

  # aws_security_group_rule.egress_neo4j_bolt[0] will be created
  + resource "aws_security_group_rule" "egress_neo4j_bolt" {
      + from_port                = 9000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = "sg-07bba049ef26664ab"
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9000
      + type                     = "egress"
    }

  # aws_security_group_rule.egress_neo4j_https[0] will be created
  + resource "aws_security_group_rule" "egress_neo4j_https" {
      + from_port                = 7473
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = "sg-07bba049ef26664ab"
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 7473
      + type                     = "egress"
    }

  # aws_security_group_rule.egress_raft will be created
  + resource "aws_security_group_rule" "egress_raft" {
      + from_port                = 7000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 7000
      + type                     = "egress"
    }

  # aws_security_group_rule.egress_transaction will be created
  + resource "aws_security_group_rule" "egress_transaction" {
      + from_port                = 6000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 6000
      + type                     = "egress"
    }

  # aws_security_group_rule.ingress_discovery will be created
  + resource "aws_security_group_rule" "ingress_discovery" {
      + from_port                = 5000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 5000
      + type                     = "ingress"
    }

  # aws_security_group_rule.ingress_neo4j_bolt[0] will be created
  + resource "aws_security_group_rule" "ingress_neo4j_bolt" {
      + from_port                = 9000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = "sg-07bba049ef26664ab"
      + to_port                  = 9000
      + type                     = "ingress"
    }

  # aws_security_group_rule.ingress_neo4j_https[0] will be created
  + resource "aws_security_group_rule" "ingress_neo4j_https" {
      + from_port                = 7473
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = "sg-07bba049ef26664ab"
      + to_port                  = 7473
      + type                     = "ingress"
    }

  # aws_security_group_rule.ingress_raft will be created
  + resource "aws_security_group_rule" "ingress_raft" {
      + from_port                = 7000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 7000
      + type                     = "ingress"
    }

  # aws_security_group_rule.ingress_transaction will be created
  + resource "aws_security_group_rule" "ingress_transaction" {
      + from_port                = 6000
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 6000
      + type                     = "ingress"
    }

  # aws_volume_attachment.ebs_attach[0] will be created
  + resource "aws_volume_attachment" "ebs_attach" {
      + device_name = "/dev/xvdf"
      + id          = (known after apply)
      + instance_id = (known after apply)
      + volume_id   = (known after apply)
    }

  # aws_volume_attachment.ebs_attach[1] will be created
  + resource "aws_volume_attachment" "ebs_attach" {
      + device_name = "/dev/xvdf"
      + id          = (known after apply)
      + instance_id = (known after apply)
      + volume_id   = (known after apply)
    }

  # aws_volume_attachment.ebs_attach[2] will be created
  + resource "aws_volume_attachment" "ebs_attach" {
      + device_name = "/dev/xvdf"
      + id          = (known after apply)
      + instance_id = (known after apply)
      + volume_id   = (known after apply)
    }

  # module.neo4j.aws_instance.instance[0] will be created
  + resource "aws_instance" "instance" {
      + ami                                  = "ami-020ef1e2f6c2cc6d6"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = false
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = false
      + ebs_optimized                        = false
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "CustomerManaged_tflab_develop_ec2-role"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t4g.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf_key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = "subnet-09e8a4b23c4dfa0a8"
      + tags                                 = {
          + "Environment"    = "develop"
          + "Function"       = "neo4j"
          + "Name"           = "tflab-develop-neo4j1"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
          + "neo4j"          = "core"
        }
      + tags_all                             = {
          + "Environment"    = "develop"
          + "Function"       = "neo4j"
          + "Name"           = "tflab-develop-neo4j1"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
          + "neo4j"          = "core"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "ceef21903d7bc5ed91a90b541bc3507cdde1dae3"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 3
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = "enabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.neo4j.aws_instance.instance[1] will be created
  + resource "aws_instance" "instance" {
      + ami                                  = "ami-020ef1e2f6c2cc6d6"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = false
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = false
      + ebs_optimized                        = false
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "CustomerManaged_tflab_develop_ec2-role"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t4g.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf_key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = "subnet-0e2f1909b7f0b5b48"
      + tags                                 = {
          + "Environment"    = "develop"
          + "Function"       = "neo4j"
          + "Name"           = "tflab-develop-neo4j2"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
          + "neo4j"          = "core"
        }
      + tags_all                             = {
          + "Environment"    = "develop"
          + "Function"       = "neo4j"
          + "Name"           = "tflab-develop-neo4j2"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
          + "neo4j"          = "core"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "ceef21903d7bc5ed91a90b541bc3507cdde1dae3"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 3
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = "enabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.neo4j.aws_instance.instance[2] will be created
  + resource "aws_instance" "instance" {
      + ami                                  = "ami-020ef1e2f6c2cc6d6"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = false
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = false
      + ebs_optimized                        = false
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "CustomerManaged_tflab_develop_ec2-role"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t4g.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf_key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = "subnet-0bd6ca7f03bc7f9bc"
      + tags                                 = {
          + "Environment"    = "develop"
          + "Function"       = "neo4j"
          + "Name"           = "tflab-develop-neo4j3"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
          + "neo4j"          = "core"
        }
      + tags_all                             = {
          + "Environment"    = "develop"
          + "Function"       = "neo4j"
          + "Name"           = "tflab-develop-neo4j3"
          + "Project"        = "tflab"
          + "TagEnvironment" = "develop"
          + "TagExtra"       = "develop-workspace"
          + "TagWorkspace"   = "develop"
          + "neo4j"          = "core"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "ceef21903d7bc5ed91a90b541bc3507cdde1dae3"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 3
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = "enabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

Plan: 27 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_ids         = (known after apply)
  + instance_private_dns = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + instance_private_ips = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + instance_public_dns  = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + instance_public_ips  = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + instances_role_id    = "CustomerManaged_tflab_develop_ec2-role"
  + route53_fqdns        = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + sg_id                = (known after apply)
╷
│ Warning: Backend configuration ignored
│
│   on ../instance/versions.tf line 10, in terraform:
│   10:   backend "s3" {
│
│ Any selected backend applies to the entire configuration, so Terraform expects provider configurations only in the
│ root module.
│
│ This is a warning rather than an error because it's sometimes convenient to temporarily call a root module as a
│ child module for testing purposes, but this backend configuration block will have no effect.
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: n3.out

To perform exactly these actions, run the following command to apply:
    terraform apply "n3.out"
[ec2-user@ip-172-31-94-134 tf-neo4j]$ ^C
[ec2-user@ip-172-31-94-134 tf-neo4j]$  terraform apply "n3.out"
aws_iam_policy.cwlogs[0]: Creating...
aws_security_group.sg: Creating...
aws_iam_policy.instances: Creating...
aws_iam_policy.instances: Creation complete after 0s [id=arn:aws:iam::786081340798:policy/CustomerManaged_tflab_develop_neo4j_ec2-desc]
aws_iam_role_policy_attachment.instances_core: Creating...
aws_iam_policy.cwlogs[0]: Creation complete after 0s [id=arn:aws:iam::786081340798:policy/CustomerManaged_tflab_develop_neo4j_cwlog-write]
aws_iam_role_policy_attachment.cwlogs_core[0]: Creating...
aws_iam_role_policy_attachment.instances_core: Creation complete after 0s [id=CustomerManaged_tflab_develop_ec2-role-20220817165904740200000002]
aws_iam_role_policy_attachment.cwlogs_core[0]: Creation complete after 0s [id=CustomerManaged_tflab_develop_ec2-role-20220817165904768300000003]
aws_security_group.sg: Creation complete after 1s [id=sg-06fb4c5b9e59480c6]
aws_security_group_rule.ingress_neo4j_bolt[0]: Creating...
aws_security_group_rule.egress_raft: Creating...
aws_security_group_rule.ingress_transaction: Creating...
aws_security_group_rule.ingress_neo4j_https[0]: Creating...
aws_security_group_rule.ingress_discovery: Creating...
aws_security_group_rule.egress_neo4j_bolt[0]: Creating...
aws_security_group_rule.egress_neo4j_https[0]: Creating...
aws_security_group_rule.egress_transaction: Creating...
module.neo4j.aws_instance.instance[2]: Creating...
aws_security_group_rule.ingress_raft: Creating...
aws_security_group_rule.ingress_neo4j_bolt[0]: Creation complete after 1s [id=sgrule-3054081828]
aws_security_group_rule.egress_discovery: Creating...
aws_security_group_rule.egress_neo4j_https[0]: Creation complete after 1s [id=sgrule-370448214]
module.neo4j.aws_instance.instance[1]: Creating...
aws_security_group_rule.egress_neo4j_bolt[0]: Creation complete after 1s [id=sgrule-2847734742]
aws_security_group_rule.ingress_neo4j_https[0]: Creation complete after 1s [id=sgrule-1527692392]
module.neo4j.aws_instance.instance[0]: Creating...
aws_security_group_rule.ingress_transaction: Creation complete after 2s [id=sgrule-2531166563]
aws_security_group_rule.egress_raft: Creation complete after 2s [id=sgrule-3613430052]
aws_security_group_rule.ingress_discovery: Creation complete after 3s [id=sgrule-993910078]
aws_security_group_rule.egress_transaction: Creation complete after 3s [id=sgrule-503028285]
aws_security_group_rule.ingress_raft: Creation complete after 4s [id=sgrule-4068457128]
aws_security_group_rule.egress_discovery: Creation complete after 3s [id=sgrule-2569503063]
module.neo4j.aws_instance.instance[2]: Still creating... [10s elapsed]
module.neo4j.aws_instance.instance[1]: Still creating... [10s elapsed]
module.neo4j.aws_instance.instance[0]: Still creating... [10s elapsed]
module.neo4j.aws_instance.instance[1]: Creation complete after 12s [id=i-06317607e975634ca]
module.neo4j.aws_instance.instance[0]: Creation complete after 12s [id=i-06a411868a910fad1]
module.neo4j.aws_instance.instance[2]: Creation complete after 14s [id=i-0a31e2e6c773b8d46]
aws_route53_record.dns_record[1]: Creating...
aws_route53_record.dns_record[0]: Creating...
aws_ebs_volume.ebs_data_block[0]: Creating...
aws_route53_record.dns_record[2]: Creating...
aws_ebs_volume.ebs_data_block[1]: Creating...
aws_ebs_volume.ebs_data_block[2]: Creating...
aws_route53_record.dns_record[1]: Still creating... [10s elapsed]
aws_route53_record.dns_record[0]: Still creating... [10s elapsed]
aws_ebs_volume.ebs_data_block[0]: Still creating... [10s elapsed]
aws_route53_record.dns_record[2]: Still creating... [10s elapsed]
aws_ebs_volume.ebs_data_block[2]: Still creating... [10s elapsed]
aws_ebs_volume.ebs_data_block[1]: Still creating... [10s elapsed]
aws_ebs_volume.ebs_data_block[1]: Creation complete after 10s [id=vol-08d6ea1f510a394f0]
aws_ebs_volume.ebs_data_block[0]: Creation complete after 10s [id=vol-0b93148ab495124a7]
aws_ebs_volume.ebs_data_block[2]: Creation complete after 10s [id=vol-0d75481cbcf02ea7a]
aws_volume_attachment.ebs_attach[2]: Creating...
aws_volume_attachment.ebs_attach[1]: Creating...
aws_volume_attachment.ebs_attach[0]: Creating...
aws_route53_record.dns_record[1]: Still creating... [20s elapsed]
aws_route53_record.dns_record[0]: Still creating... [20s elapsed]
aws_route53_record.dns_record[2]: Still creating... [20s elapsed]
aws_volume_attachment.ebs_attach[1]: Still creating... [10s elapsed]
aws_volume_attachment.ebs_attach[2]: Still creating... [10s elapsed]
aws_volume_attachment.ebs_attach[0]: Still creating... [10s elapsed]
aws_route53_record.dns_record[1]: Creation complete after 28s [id=Z01174155YR4AKQ2A15D_tflab-neo4j-core-02.cmcloudlab436.info_A]
aws_route53_record.dns_record[0]: Still creating... [30s elapsed]
aws_route53_record.dns_record[2]: Still creating... [30s elapsed]
aws_volume_attachment.ebs_attach[2]: Still creating... [20s elapsed]
aws_volume_attachment.ebs_attach[1]: Still creating... [20s elapsed]
aws_volume_attachment.ebs_attach[0]: Still creating... [20s elapsed]
aws_volume_attachment.ebs_attach[1]: Creation complete after 21s [id=vai-2818458708]
aws_volume_attachment.ebs_attach[0]: Creation complete after 21s [id=vai-2153225996]
aws_volume_attachment.ebs_attach[2]: Creation complete after 22s [id=vai-747689286]
aws_route53_record.dns_record[0]: Still creating... [40s elapsed]
aws_route53_record.dns_record[2]: Still creating... [40s elapsed]
aws_route53_record.dns_record[2]: Creation complete after 40s [id=Z01174155YR4AKQ2A15D_tflab-neo4j-core-03.cmcloudlab436.info_A]
aws_route53_record.dns_record[0]: Creation complete after 42s [id=Z01174155YR4AKQ2A15D_tflab-neo4j-core-01.cmcloudlab436.info_A]
╷
│ Warning: Backend configuration ignored
│
│   on ../instance/versions.tf line 10, in terraform:
│   10:   backend "s3" {
│
│ Any selected backend applies to the entire configuration, so Terraform expects provider configurations only in the
│ root module.
│
│ This is a warning rather than an error because it's sometimes convenient to temporarily call a root module as a
│ child module for testing purposes, but this backend configuration block will have no effect.
╵

Apply complete! Resources: 27 added, 0 changed, 0 destroyed.

Outputs:

instance_ids = [
  "i-06a411868a910fad1",
  "i-06317607e975634ca",
  "i-0a31e2e6c773b8d46",
]
instance_private_dns = [
  "ip-172-31-9-246.ec2.internal",
  "ip-172-31-86-25.ec2.internal",
  "ip-172-31-28-216.ec2.internal",
]
instance_private_ips = [
  "172.31.9.246",
  "172.31.86.25",
  "172.31.28.216",
]
instance_public_dns = [
  "",
  "",
  "",
]
instance_public_ips = [
  "",
  "",
  "",
]
instances_role_id = "CustomerManaged_tflab_develop_ec2-role"
route53_fqdns = [
  "tflab-neo4j-core-01.cmcloudlab436.info",
  "tflab-neo4j-core-02.cmcloudlab436.info",
  "tflab-neo4j-core-03.cmcloudlab436.info",
]
sg_id = "sg-06fb4c5b9e59480c6"
